Microservices Basics
What is a microservice?

A) A monolithic application split into modules.
B) A small and independent service that performs a single business function.
C) A set of services running on a single server.
D) A large application that performs many functions.
Answer: B

Which of the following is NOT a characteristic of microservices architecture?

A) Loose coupling between services.
B) Services are deployed independently.
C) A single database for the entire system.
D) Each service focuses on a specific business function.
Answer: C

Which of the following is typically used to manage the interaction between microservices?

A) Direct HTTP calls between services.
B) API Gateway.
C) Service Registry.
D) All of the above.
Answer: D

What is the purpose of an API Gateway in a microservices architecture?

A) To store data for microservices.
B) To allow clients to call individual services directly.
C) To act as a single entry point for client requests and forward them to the appropriate service.
D) To cache the database queries.
Answer: C

Which of the following is a benefit of using microservices?

A) Simpler deployment cycles.
B) Improved fault isolation.
C) Easier scaling of specific components.
D) All of the above.
Answer: D

Which of the following is a common communication style used in microservices?

A) Synchronous communication using REST APIs.
B) Asynchronous communication using message queues.
C) Both A and B.
D) Direct communication using TCP.
Answer: C

What is the role of a service registry (e.g., Eureka) in microservices?

A) To monitor services for failure.
B) To store logs generated by services.
C) To help services discover each other and route requests.
D) To cache the results of service requests.
Answer: C

Which of the following is a common challenge in microservices architecture?

A) Monolithic design.
B) Difficulty in scaling services independently.
C) Distributed data management and consistency.
D) Limited ability to automate testing.
Answer: C

Which of the following patterns is often used to prevent cascading failures in microservices?

A) Singleton Pattern.
B) Circuit Breaker Pattern.
C) Adapter Pattern.
D) Observer Pattern.
Answer: B

Which of the following is an advantage of using microservices architecture over monolithic architecture?

A) Faster development and deployment.
B) Tightly coupled components.
C) Centralized database for all services.
D) More difficult scaling and testing.
Answer: A

Microservices Communication and Data Management
Which of the following messaging technologies is commonly used for asynchronous communication between microservices?

A) REST API
B) gRPC
C) RabbitMQ
D) SOAP
Answer: C

In microservices, how can services ensure data consistency across distributed services?

A) Use a shared database for all services.
B) Use two-phase commit (2PC).
C) Use eventual consistency and distributed transactions.
D) Use a service registry for data consistency.
Answer: C

What is the role of a message broker in microservices?

A) To balance the load across services.
B) To handle asynchronous communication between services.
C) To provide security for service-to-service communication.
D) To store data used by services.
Answer: B

What type of communication is most often used between microservices that need to respond in real-time?

A) Asynchronous communication using messaging queues.
B) Synchronous communication using REST or gRPC.
C) Event-based communication.
D) File-based communication.
Answer: B

Which database approach is commonly used in microservices architecture to avoid tight coupling between services?

A) Shared database for all services.
B) A separate database for each service (Database per service pattern).
C) A single database with multiple schemas for each service.
D) Centralized NoSQL database.
Answer: B

Microservices Patterns
Which pattern is used to enable failover and fallback in the event of a microservice failure?

A) Circuit Breaker Pattern
B) Event Sourcing Pattern
C) Proxy Pattern
D) Adapter Pattern
Answer: A

What is the Saga pattern used for in microservices?

A) To ensure high availability across services.
B) To manage distributed transactions and achieve eventual consistency.
C) To route requests to different services.
D) To log interactions between microservices.
Answer: B

Which pattern is used to hide the complexity of communication between multiple microservices from the client?

A) API Gateway Pattern
B) Event Sourcing Pattern
C) Adapter Pattern
D) Strangler Pattern
Answer: A

Which pattern allows microservices to emit events that other services can react to?

A) Observer Pattern
B) Event-Driven Pattern
C) Circuit Breaker Pattern
D) Singleton Pattern
Answer: B

What is the anti-corruption layer pattern used for in microservices architecture?

A) To prevent unauthorized access to services.
B) To minimize the impact of changes in legacy systems when integrating with microservices.
C) To ensure data consistency between services.
D) To cache service responses for performance improvements.
Answer: B

General Microservices Concepts
Which of the following tools is typically used for container orchestration in microservices?

A) Kubernetes
B) Jenkins
C) Docker
D) Ansible
Answer: A

Which of the following is a common tool for monitoring microservices in production?

A) Prometheus
B) Maven
C) Git
D) JUnit
Answer: A

Which of the following is NOT a common issue with microservices architecture?

A) Network latency between services.
B) Fault tolerance.
C) Data consistency.
D) Rapid deployment and scalability.
Answer: D

In a microservices-based system, what is the recommended way to handle failures between dependent services?

A) Retry failed requests indefinitely.
B) Use timeouts and circuit breakers to handle failures gracefully.
C) Avoid retries altogether.
D) Always use synchronous communication to avoid failure.
Answer: B

What is a key advantage of using gRPC over REST for microservices communication?

A) gRPC is better for event-driven architectures.
B) gRPC supports real-time, high-performance, low-latency communication.
C) gRPC only supports message queues.
D) REST provides lower latency than gRPC.
Answer: B